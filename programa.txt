
 * Function:
 *      Sintesis de Audio record and Play
 *
 * Interfaz Humana:
 *      KEY3: Record Start/Stop 
 *      KEY2: Play Start/Stop 
 *      SEG7: Display duracion de recording/playing
 *      SW0:  Audio Source Selection: DOWN-->MIC, UP-->LINE-IN
 
 *
 * CONFIGURATION:
 *      SDRAM: usado para almacenar record audio signal
 *      on-chip memory: usado para almacenar en Nios II 
 */
#include <stdio.h>
#include "terasic_includes.h"
#include "AUDIO.h"
#include "LED.h"
#include "SEG7.h"
#include <math.h>
#include <limits.h>



#ifdef DEBUG_APP
    #define APP_DEBUG(x)    DEBUG(x)
#else
    #define APP_DEBUG(x)
#endif


///////////////////////////////////////////////////////////////////////////////
//////////// Internal function prototype & data structure /////////////////////
///////////////////////////////////////////////////////////////////////////////
//================= internal function prototype & data structure definit =====
#define RECORD_BUTTON   0x08
#define PLAY_BUTTON     0x04
#define SENO_BUTTON     0x02
#define RECORD_BLOCK_SIZE   250    // ADC FIFO: 512 byte
#define PLAY_BLOCK_SIZE     250    // DAC FIFO: 512 byte
#define MAX_TRY_CNT         1024
#define LINEOUT_DEFUALT_VOL 0x79  // 0 dB
#define USE_SDRAM_FOR_DATA
int time2=0;


#ifndef USE_SDRAM_FOR_DATA
    #define BUF_SAMPLE_NUM     (96000*5)  // 5 second @ 96K
#endif


typedef enum{
    MIC_RECORD,
    LINEIN_RECORD,
    LINEOUT_PLAY
}AUDIO_FUNC;

void button_monitor_isr(void* context, alt_u32 id);
bool button_monitor_start(volatile alt_u32 *pPressedMask);
bool init_audio(AUDIO_FUNC audio_func);
void display_time_elapsed(alt_u32 sample_num);

// ui config
bool ui_is_mic_boost(void);
bool ui_is_mic_record(void);
bool ui_is_dac_zero_cross(void);
int  ui_get_sample_rate(void);

// gloal variable
int record_sample_rate;

///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
    bool bMicRecord;
    bMicRecord = (IORD(SW_BASE, 0) & 0x01)?FALSE:TRUE;
    return bMicRecord;
}

bool ui_is_mic_boost(void){
    bool bMicBoost;
    bMicBoost = (IORD(SW_BASE, 0) & (0x01 << 1))?TRUE:FALSE;
    return bMicBoost;
}

bool ui_is_dac_zero_cross(void){
    bool bZeroCross;
    bZeroCross = (IORD(SW_BASE, 0) & (0x01 << 2))?TRUE:FALSE;
    return bZeroCross;
}

int ui_get_sample_rate(void){
    int sample_rate = 8000;
    alt_u32 mask;
    mask = IORD(SW_BASE, 0);
    mask = (mask >> 3) & 0x07;
    if (mask == 1)
        sample_rate = 8000;
    else if (mask == 2)
        sample_rate = 8000;
    else if (mask == 3)
        sample_rate = 8000;
    else if (mask == 4)
        sample_rate = 8000;
    return sample_rate;
}

void button_monitor_isr(void* context, alt_u32 id){
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
}

bool button_monitor_start(volatile alt_u32 *pPressedMask){
    bool bSuccess = TRUE;
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0F); // 4-button

    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);

    // register IRQ
    if (bSuccess && (alt_irq_register(KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
        printf("[SW-MONITOR]register button IRQ fail\r\n");
        bSuccess = FALSE;
    }

    return bSuccess;
}




bool init_audio(AUDIO_FUNC audio_func){
    bool bSuccess = TRUE;
    AUDIO_InterfaceActive(FALSE);
    //
    if (audio_func == MIC_RECORD){
        bool bMicBoost;
        bMicBoost = ui_is_mic_boost();
        AUDIO_SetInputSource(SOURCE_MIC);
        AUDIO_DacEnableSoftMute(FALSE);
        AUDIO_AdcEnableHighPassFilter(FALSE);
        AUDIO_MicBoost(bMicBoost);
        AUDIO_MicMute(FALSE);
        AUDIO_LineInMute(FALSE);
    }else if (audio_func == LINEIN_RECORD){
        AUDIO_SetInputSource(SOURCE_LINEIN);
        AUDIO_DacEnableSoftMute(FALSE);
        AUDIO_AdcEnableHighPassFilter(FALSE);
        AUDIO_MicMute(FALSE);
        AUDIO_LineInMute(FALSE);
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
    }else if (audio_func == LINEOUT_PLAY){
        AUDIO_DacEnableSoftMute(FALSE);
        AUDIO_MicBoost(FALSE);
        AUDIO_MicMute(FALSE);
        AUDIO_LineInMute(FALSE);
        AUDIO_DacEnableSoftMute(FALSE);
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_DacEnableZeroCross(ui_is_dac_zero_cross());
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
        AUDIO_DacEnableSoftMute(FALSE);
    }

    if (record_sample_rate == 8000)
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
    else if (record_sample_rate == 8000)
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
    else if (record_sample_rate ==8000)
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
    else if (record_sample_rate == 8000)
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
    else
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
    //
    AUDIO_InterfaceActive(TRUE);

    return bSuccess;
}


void display_time_elapsed(alt_u32 sample_num){
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
    time2=time;
    //printf("time %d",(int)time2);
    SEG7_Decimal(time, 0x04);

}



void show_power(short sample){
    static alt_u32 sum = 0;
    static alt_u16   cnt = 0;
    alt_u16 power = 0;
    sum += (sample >= 0)?sample:-sample;
    cnt++;
    if (cnt == 32){
        power = sum >> 13;
        LED_LightCount(power);
        sum = 0;
        cnt = 0;
    }
}


bool init(void){
    bool bSuccess = TRUE;

    SEG7_Clear();


    SEG7_Decimal(0x00000000, 0x00);

    // prepare
    if (!AUDIO_Init()){

        printf("Audio Init Error\r\n");
        bSuccess = FALSE;
    }


    return bSuccess;
}

void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
        data = *pData++;
        sample_l = (short)((data >> 16) & 0xFFFF);
        sample_r = (short)(data & 0xFFFF);
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
            sample_max = sample_l;
        if (sample_l < 0 && sample_max <  -sample_l)
            sample_max = -sample_l;
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n", sample_max);
}


const char szMenu[][128] = {
    "======== Sintetizador Audio  ==========\n",
    "Guia de operacion:\n",
    "  KEY3: Graba Start/Stop (Auto Stop cuando buffer esta lleno)\n",
    "  KEY2: Play Start/Stop (Audo Stop cuando no data to play)\n",
    "  SW0:  Seleccion de fuente de audio. DOWN-->MIC, UP-->LINE-IN\n",
    "  Status Information:\n",
    "  SEG7: Display tiempo para playing/recording.\n"
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
        printf(szMenu[i]);
}

int main()
{
    typedef enum{
        ST_STANDY,
        ST_RECODING,
        ST_PLAYING,
        ST_SENO
    }STATE;
    STATE state = ST_STANDY;
    volatile alt_u32 button_mask=0;
    bool bRecordPressed, bPlayPressed,bSenoPressed, bError = FALSE;
    alt_u32 *pBuf, *pPlaying, *pRecording, RecordLen, PlayLen, data, try_cnt, buf_sample_size;
    alt_u16 ch_right, ch_left ;


    printf("\nHello World\n");

    show_menu();
    if (!init())
        return 0;



#ifdef USE_SDRAM_FOR_DATA
    pBuf = (alt_u32 *)SDRAM_BASE;
    buf_sample_size = SDRAM_SPAN/sizeof(alt_u32);
#else
    // alloc memory to stroe PCM data
    buf_sample_size = BUF_SAMPLE_NUM;
    pBuf = malloc(buf_sample_size * sizeof(alt_u32));
    if (!pBuf){
        LCD_TextOut("malloc fail\n\n");
        printf("malloc fail\r\n");
        return 0;
    }
#endif
    button_monitor_start(&button_mask);  // button IRQ
    printf("ready\n");


    // test
    record_sample_rate = ui_get_sample_rate();
    RecordLen = buf_sample_size;
    while(1){
    	AUDIO_AdcFifoGetData(&ch_left, &ch_right);
    	data = (ch_left << 16) | ch_right;
    	ch_left = data >> 16;
    	ch_right = data & 0xFFFF;
    	AUDIO_DacFifoSetData(ch_left, ch_right);
    	bRecordPressed = (button_mask & RECORD_BUTTON)?TRUE:FALSE;
        bPlayPressed = (button_mask & PLAY_BUTTON)?TRUE:FALSE;
        bSenoPressed =(button_mask & SENO_BUTTON)?TRUE:FALSE;
        if (bPlayPressed || bRecordPressed)
                    button_mask = 0;
                if (state == ST_STANDY){
                    if (bRecordPressed){
                        bool bMicRecord;
                        record_sample_rate = ui_get_sample_rate();
                        bMicRecord = ui_is_mic_record();
                        AUDIO_FifoClear();
                        AUDIO_DacFifoSetData(ch_left, ch_right);
                        init_audio(bMicRecord?MIC_RECORD:LINEIN_RECORD);
                        AUDIO_FifoClear();
                        state = ST_RECODING;
                        if (bMicRecord){
                            bool bMicBoost = ui_is_mic_boost();
                            printf("MIC %srecording (sample rate = %d)...\r\n", bMicBoost?"Boost ":"", record_sample_rate);

                        }else{
                            printf("LINE-IN recording (sample rate = %d)...\r\n", record_sample_rate);


                        }
                        pRecording = pBuf;
                        RecordLen = 0;
                    }else if (bPlayPressed){
                        if (RecordLen == 0){
                            printf("Please record before play audio\r\n");

                        }else{
                            bool bZeroCross = ui_is_dac_zero_cross();
                            AUDIO_FifoClear();
                            init_audio(LINEOUT_PLAY);
                            state = ST_PLAYING;
                            printf("playing (sample rate = %d)...\r\n", record_sample_rate);


                            pPlaying = pBuf;
                            PlayLen = 0;
                        }
                    }
                    bError = FALSE;
                }else if (state == ST_RECODING){
                    if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
                        // stop record
                        printf("record %d samples\n", (int)RecordLen);


                        state = ST_STANDY;
                        LED_AllOff();
                        dump_record_data(pBuf, RecordLen);

                    } else {
                    				// continua recoding
                    				int i = 0;


                    				while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)) {
                    					try_cnt = 0;
                    					float phasis = 0;
                    					const float frequency = 440.1;
                    					const float phi_incr=2*M_PI*frequency/440.1;
                    					while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT) { // wait while empty
                    						try_cnt++;
                    					}
                    					if (try_cnt >= MAX_TRY_CNT) {
                    						bError = TRUE;
                    						break;
                    					}
                    					
                    					AUDIO_AdcFifoGetData(&ch_left, &ch_right);
                    					short  a = sinl(2*10000*M_PI*time2/440.1);
                    					if (AUDIO_AdcFifoNotEmpty()){
                    						//short  a = sinl(2*10000*M_PI*time2/440.1);
                    						ch_left=ch_left+a;
                    						ch_right=ch_right+a;
                    						AUDIO_DacFifoSetData(ch_left,ch_right );
                    					}
                    					data = (ch_left << 16) | ch_right;

                    					//data = *pPlaying++;
                    					*pRecording++ = data;
                    					//data = *pPlaying++;
                    					RecordLen++;
                    					i++;
                    					AUDIO_DacFifoSetData(ch_left,ch_right );

                    				}  // while
                    				display_time_elapsed(RecordLen);
                    			}
                    		} else if (state == ST_PLAYING) {
                    			if (bPlayPressed || (PlayLen >= RecordLen) || bError) {
                    				// stop playing
                    				printf("Play Stop %s\r\n", bError ? "(Error)" : "");

                    				state = ST_STANDY;
                    				LED_AllOff();
                    			} else {
                    				// continue playing
                    				int i = 0;
                    				while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)) {

                    					try_cnt = 0;
                    					while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT) { // wait while full
                    						try_cnt++;
                    					}
                    					if (try_cnt >= MAX_TRY_CNT) {
                    						bError = TRUE;
                    						break;
                    					}
                    					data = *pPlaying++;
                    					ch_left = data >> 16;
                    					ch_right = data & 0xFFFF;
                    					AUDIO_DacFifoSetData(ch_left, ch_right);

                    					i++;
                    					//contador++;
                    					PlayLen++;
                    					show_power(data & 0xFFFF);
                    					//printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                    				}
                    				display_time_elapsed(PlayLen);

                    			}
                    		}
                    	}

                    }

